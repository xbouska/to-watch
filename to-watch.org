* LISA18 - What Breaks Our Systems: A Taxonomy of Black Swans
:PROPERTIES:
:CREATED:  [2019-03-11 Mon 07:30]
:lg-subject: LISA18 - What Breaks Our Systems: A Taxonomy of Black Swans
:END:

https://youtu.be/LSQUO_Yi9oM

* SREcon18 Europe - Ethics in Computing
:PROPERTIES:
:CREATED:  [2019-03-11 Mon 07:30]
:lg-subject: SREcon18 Europe - Ethics in Computing
:END:

https://youtu.be/UjMo1mgSMDo

* SREcon18 Europe - Lessons Learned—Data Driven Hiring 3 Years Later
:PROPERTIES:
:CREATED:  [2019-03-11 Mon 07:31]
:lg-subject: SREcon18 Europe - Lessons Learned—Data Driven Hiring 3 Years Later
:END:

https://youtu.be/iC7xMymiIUY

* The Whys and Hows of Database Streaming
:PROPERTIES:
:CREATED:  [2019-03-11 Mon 16:42]
:lg-subject: The Whys and Hows of Database Streaming
:END:

https://youtu.be/0K0fYHsFBZg

** Transcript.
So I'm joy I'm a senior software engineer at a WePay.
Hey everyone 
If you haven't heard about WePay we provide payment solutions for platform businesses through our API.

For this talk I'm going to be talking about database streaming. We live in a world where we expect kind of everything to be streamed right like our music is streamed our TV shows are streamed  I want to argue that the data in our data warehouses should not be considered as second-class citizen.
We should allow everything to be streamed in real time so that we can access these data as soon as they arrive into the database.
So this talk is about our journey at WePay going from an ETL data pipeline into a streaming based real-time pipeline the talk is going to be broken down into three sections.
we're first going to kind of go over what our current the ETL prop Remus ETL process look like and what are some of the pain points that we're going through.
We're also going to introduce change data capture which is how the mechanism that we use to stream data from our database.
Next we're going to take a look at a real world example which is how we're actually streaming data from MySQL into our data warehouse.
Finally we're going to kind of go a little experimental and take a look some of the ongoing work we're doing with streaming Cassandra into bigquery which is our data warehouse as I mentioned let's get started.
So ed we've hey we use the quarry for those of you who are in the AWS eslint this is the equivalent of redshift.
So it's basically the Google cloud data warehouse.
It uses NC compliant Seco as this query language which makes it really easy for our developers and engineers to take up.
It supports nested and repeated data structures for things like lists and or structs and even geospatial data types which is actually something very useful for CDC as you will see later on.
It has a virtual view feature which you can create meals on top of the base tables. Because these views are not materialized when you're occurring the view you're essentially querying the underlying table.
This will allow you to access the data in real time sorry access real-time data even through views.
That's another feature that we're leveraging very heavily at WePay for our streaming pipeline which we'll also go into later on.
At WePay we use a micro service architecture. Most of our micro services are stateful and the states are typically stored into a MySQL database. and we use air flow as a tool to orchestrate our data pipelines for anyone who hasn't heard about air flow you can kind of think of it as cron on steroids that's designed for data pipelines and complex workflow and the way we're using air flow is basically by periodically pulling the my Seco database for change the way we did we detect these changes by looking at the modify time column in each table and if the modify time has model has been changing the most recent interval.
We upload that information into bigquery it's pretty standard with this approach though we're starting to hit a lot of limitations and operational overhead.
So the first problem which ties back to the talk from from the introduction is that it has very low latency or sorry very high latency the data won't actually arrive into bigquery until much later some of our jobs we try to push the limit to once every 15 minute.
So the job runs in 15 minute interval but then we get into this inconsistency where analysts may be trying to do a join in bigquery and one of the table is being uploaded on an hourly or daily basis and another table is being uploaded every 15 minutes. Then the data becomes inconsistency.
So it's like why is it not in this other table but it's here the second problem is that because the way we use air flow you we're creating one job for every single table an airflow a job is called a day or directed acyclic graph.
So we have basically hundreds of decks each of them is responsible for a table and this is a whole lot of operational or configurations as well as overhead when it comes to monitoring.
So it's not quite ideal another problem is hard deletes we can't allow hard deletes in our database because when you're pulling a database you're running these flat queries it's not going to generate which data has been deleted it's only going to show you what's in the database.
So we basically have to tower micro-service owners about hey just don't delete anything in these tables which is pretty error-prone and that's leads to the first point is that it is very error-prone we are relying on our micro-service owners to be doing the right thing not only do the must say not delete rows from this table which they must be able to guarantee that they're always updating the modify time step every time because otherwise we'll still get into data inconsistency issue because we won't be able to detect those changes finally the schema management is actually manual because if it Evi decides to go into the database and they want to say add a column to a table air flow doesn't know about it.
So now we have to go into air flow and we have to manage every single one of those tables or pop whichever table that needs to be modified and we have to update the schema.
So that it propagates the big query and.
So on on top of all these problems where our data ecosystem is constantly evolving we are adding new tools that are optimized for different jobs we may introduce a Redis that optimizes for key value cache we may introduce elastic search to do full-text search we may want to add a graph database for fraud detection or we may want to add some live dashboards and alert the monitoring system that helped us understand how our business is doing right now and airflow being a batch oriented tool it's not meant for streaming.
So we needed a better tool for this job and as many of you probably already guessed it or if you already read the summary in the to talk we use Kafka with calf canal every single downstream derived application can now just listen to the Kafka log and apply the changes at their own pace which is really nice and because Kafka is designed for streaming to solve the streaming problem the next question is we know that we're going to be using Kafka the question is how are we getting the data from these databases into Kafka there's a couple options first one we can just double right about system right every time we're updating the database we make sure we're also sending a message to Kafka then the question is should we do this synchronously or asynchronously if we update asynchronously we'll again getting to data inconsistent issues because we don't know whether the data has been successfully written into Kafka when we're doing the updating to the database if we do this synchronously which means that every time we successfully sends to Kafka we commit the change every time we fail to send to Kafka we abort the change but we're talking about distributed systems here and errors are our friends
The problem is timeouts
Timeouts is something that we don't quite know whether the change it could be a network glitch that I essentially cost a timeout and the data could have been successfully running to Kafka or it could have not.
So we wouldn't know what to do and to solve that properly that required distributed transaction which means something like two-phase commit and two-phase commit is not trivial to implement and get right it requires a set of interfaces or.
So I set up two interfaces and tools to actually implement it and the vanilla Kafka doesn't support it and not to mention that with two-phase commit it means it requires multiple round-trip to do a consensus in order to have each right to commit it and that's going to take a lot of time and a lot of production database cannot allow that kind of latency there's the second option this is a cool kid on the club event sourcing right which means we're using Kafka is a source of truth.
Every time we write it we only write the data into Kafka. We're going to treat the database just like any other derived system the database is just going to be pulling changes from this kafka log and it's going to apply them into the database one by one this looked much cleaner and it will solve a lot of headaches however there is one problem with this for some use cases and it's called its rape your read your right consistency reach your right consistency is idea that when you're updating some data and you're trying to read from what you've just updated you're expected to get what you just wrote but with this setup we're actually may potentially be reading stale data because say if we have a traffic spike and we have a bunch of data that are being sent into Kafka and then the database is slow at catching up.
So at that point if we're trying to do a read we're going to be reading stale data.
So that's really bad when you're building an application like an account balance where you need to guarantee that your users are not withdrawing money to go into negative balance and that's this is problematic for that then there is the third option which is change you to capture using the right head log.
So change the capture is a design pattern in databases that basically says every single page that basically captures every single database changes into a stream of change events and then anyone that is interested in these change events can listen to the change and up and react accordingly and we mentioned we're going to do this with the right head log.
So red head log is pretty much implemented in every single database out there it's kind of an implementation detail of each database rather than an API and the idea of the right head log is that before we update the data into the storage file we're first going to update them into the right ahead log just like the name sounds and there are some benefits to this approach the first is crash recovery.
Now if we if the database crashes halfway while writing the data into the storage file the data base upon restart can look at the commit log replay the change restore the corrupted data.
So that's great the second benefit is in improving write performance in certain scenario this is the case where you have a single transaction but you're updating a lot of database a lot of tables and these table probably reside on different storage files.
So instead of trying to update on each of those table individually its first going to sequentially write all of those changing to this log that's only a single sync versus of syncing on each of those individual storage log.
So it's much faster the third benefit is streaming replication a lot of database already applies is like MySQL where all the replicas are just looking at the commit log and tail and telling the commit log applying the change and then updating these replicas asynchronously one other detail that's worth mentioning about the right head log is specifically for MySQL is that it gives you two options you can either lock statement you can either do statement based logging or you can do row based logging statement based logging means you're logging the quarries and row based doggy means you're actually logging the data after the change has been applied and in terms of changes the capture row based logging is very useful since now you know you have the data for the entire row not just a column you've updated.
So by using changes to capture with the right head lock we get the best of all the worlds we don't have to worry about implementing distributed transaction but we get all of the transactional guarantees and because we're asynchronously tailing this commit log or sorry not commit like this my secret MySQL bin log or some kind of right head log we don't have to worry about impacting the performance when we're writing the data into the database because it's asynchronous now let's take a look at how exactly we are using CDC for add WePay to stream database from IC go into bigquery.
So we use under the hood we use caf-co connect framework or we leverage cough connect framework for this job the source connector is responsible for getting from external sources and publishing them into Kafka the sink connector is responsible for reading from Kafka and storing them into external sinks applied at WePay our source our source data is MySQL our data sink is bigquery our source connector is the bzm which is an open source project and our data sink is KC BQ which stands for Kafka connect big quarry it's something we named ourselves because we wrote it and we're going to break this up into two sections and talk about each part of them separately.
So first MySQL into Kafka and we have to definitely talk about the bzm before going to any details.
So the BGM is an open source project.
it's basically meant for CDC on top and it's built on top of a cough connect framework and the way it does this is by basically just like CDC readings right headlock and converting them into individual changes and record them on the rollable basis a division guarantees at least one semantics which is the same guarantee as Kafka and this means we don't have to worry about whatever loose data but we may potentially get duplicates and finally the medium currently already supports MySQL MongoDB Postgres Oracle and SQL server.
So how does the medium look like in action before we started the BGM connector we probably already have some database running in production it's priority replicating to some replicas.
So when we first start the connector it's going to ask the database to give it the possess the file name and the position of the most recent write and it's going to record that information next it's going to run a select star from table every single table from the database.
It's going to convert the result set into individual create event and publish these events into Kafka.
Because some tables are huge this could potentially take a couple hours and during this time the database may be right maybe having additional rights and that maybe replicating to the database to the replica and MySQL sorry and the museum is just going to temporarily ignore that once the snapshotting is complete the medium is going to start to catch up and it knows where to catch out because they recorded the filename and the position of the most recent right and then once it's finally caught up it will start streaming the data in real time just like any other replica except instead of storing the information it's sending that information to Kafka.
So let's take a look at what a DBZ event looks like the before section is what the data looks like before the change after section is what the data looks like after the change the source section provides a bunch of metadata about the data source.
So like the server ID and the file name and positions as well as the database and the table that's coming from and if you're familiar with MySQL since 5.6 it introduced GT ID.
So this is actually able to support GT ID as well instead of using the file name and position.
The OP section represents the type of operation used for updates these four create and these four delete and the timestamp is the timestamp of when this event was created in the BGM if it's a create event before what we know if it's a delete event after would be now.
So this original pipeline I showed you at the very start it's pretty different from we're actually running in production it's a little bit more complicated than this let's take a look at why.
So for we're not going to basically directly reading from the MySQL in production sorry the production the master of the MySQL instance because we can potentially have snapshot that could take hours we don't want to impact the performance.
So we set up a MySQL replica and we disturb replica is dedicated for the medium and we're just going to be tailing from the the replica but having just one replica is not enough because what if it goes down.
So we set up a secondary replicas and this is responsible to in case the primary is down in order to handle failover we add a proxy in front of it.
So that if the primary is down we read from the secondary instead but of course we don't just have a single micro service we have many micro services and each one of them will be replicating to the same primary and secondary MySQL replicas and the reason that we're doing we're using just a single cluster of primary and secondary replicas for the BDM is for operational cost we we know that as we add more micro services this could potentially become problematic and we may potentially add additional cluster as well but for now this is sufficient for us because we're a start-up but even though we only have a single the BDM dedicated MySQL rep cluster we do have a individual the BDM connector for that corresponds to every single one of those micro service and this is important because it allow us to configure each micro service the medium connector based on what works for that particular connector and it also allow us to bring up and down a specific connector in the case we're doing any kind of troubleshooting without affecting the rest of what the entire streaming pipeline basically and we run these connectors in distributed mode forethought tolerance.
So this is what it actually looks like in production just a little bit more complicated now that we got our data into Kafka the next question is how are we getting the data from Kafka into bigquery as the reason we built kcb queue is because at the time there was no existing bigquery caf-co to bigquery connector we have open sources.
So if you're interested it's there on the web hey github there's a couple nice features about this connector first of all it has a conservative configurable rich high logic which means that Vickery will sometimes give you these three tribal transient errors and the connector is intelligent enough to know about it and it's going to retry in order to not drop any messages but because sometimes this error could last for a while we've implemented the retry logic with exponential back-off.
So that it won't have to hit the API too frequently in the case it's down for a long time secondly this case ebq is capable of lazily updating the schema for our tables what the lazily means here is that the beta meets table is actually going to cache the schema for every single table as for every single table and when the new message arrived is going to leverage the the data in that cache and it's going to try to send a message to bigquery with the version in cache in a case where it gets the schema error back and knows that the schema is outdated it will then go fetch the latest schema from the schema registry and it will retry again with that latest schema.
So that helped us deal with automatic schema evolution and finally KC PQ supports both batch and streaming based uploading or it basically uses bit queries batch API and the queries streaming insertion API the benefit of the batch API is when you're doing snapshotting it's the more faster option and when the snapshot is complete you can then basically flip the switch to use the streaming based API which allow you to access data in real time there is one additional information that we had to add to the KC BQE event and that's the Kafka offset I'll explain why in a second but the Kafka offset if you're not familiar with it it's essentially the position of this offset of this record in Kafka.
So here is what a table an example table looks like when we're querying for all the field in this table and I've also include Kafka officer offset there as well notice that this is actually not very useful we're getting every single record every single change event what we really want is just the final change.
So we leveraged Kafka offsets to to do deduplication and compression and determine what is that we actually need to show to the user the reason we can trust the Kafka offset is because the data are partitioned by primary key.
So an in Kafka anything in a partition is guaranteed to be ordered.
So now we know that any data was a larger offset arrived at a later time.
So is the calf offset we can now do per data by primary key and we now have a version that mirrors what's in bigquery an additional benefit of using bigquery view is that we can actually mask any of columns that we don't want to see because for example email is PII sensitive data and we don't want certain most the user to see this information we create another view on top of our the view I showed you guys earlier and this view does not have the email information and because bigquery has access control configuration.
So we can give different user different permissions to different tables there is one final piece in this pipeline that I briefly mentioned but in really getting to and that's the schema registry.
So at WePay we use the confluence schema registry and this is basically a registry that store a version history of all of the data schemas.
what's really cool about the confluence schema registry is that a dog foods on Kafka what that means is that it uses Kafka as its underlying storage for all of the schemas.
So you don't have to spin up a new storage engine or database of some sort to handle schema and schema registry supports Apache Avro as it's the serialization format which guarantees both forward and backward compatibility which is always a good thing.
Finally we don't want our schema registry to become our single point of failure because that defeats the whole purpose of a resilient pipeline.
The schema registry is the designed to be post distributed a single master a laboratory zookeeper to to do any kind of failover but essentially it is resilient to failure.
To put it all together here is what schema evolution looks like. We have also before that one thing worth mentioning is that implemented MySQL bin log doesn't just store the data change it also stores every single schema change.
This is really useful because now the B's iam a pound receiving a schema change it's going to cache this schema change and it's going to update this information to schema registry any following information that are any following data change events it receives. It can now use this new cached version of the schema instead and.
So by the time the data gets into case ebq case speaker doesn't know about the schema change yet.
So it's just going to send the data with its older cached version. But bigquery is gonna give us an error saying the schema is wrong and case speak.
You can now fetch the latest schema from the schema registry and then send this in for send the data to bigquery using this new schema.
So that completes this automatic schema evolution which is really useful.
So as I mentioned this final part is going to be a little bit experimental as it's something we're currently working on.
But it's interesting enough and relevant enough to CDC and I'm really excited to share it with you guys.
So WePay as her company guru we began to see a need for a no SQL database that's optimized for high right throughput for horizontal scalability and for high availability.
Kafka became the obvious top contender by introducing Kafka to our stack. Though we also need to figure out how we want to do CDC for Kafka. at first we thought we figured this out for MySQL how hard could it be it turns out that it's a little bit more complicated and for because this talk is not a Cassandra focused talk it's going to be I'm going to be skipping over a lot of details on Cassandra I'm only going to talk about the Cassandra stuff that are directly related to CDC.
So the thing that makes Cassandra really difficult for CDC is its replication model.
Unlike MySQL which uses primary replicas replication model Cassandra uses a peer-to-peer replication model.
This means that all the nodes are equal it also means that every single node is able to handle both reads and writes and this also means that if we look at the data in a single node it only contains a subset of the entire cluster of nodes and which makes sense right because that's how you do horizontal scale scalability you don't want a note to contain all the data.
So the next question is how exactly then this Cassandra determine where each data which notice each data go into.
So the way Cassandra handles this is that it divides the data into a cluster of nodes it's typically visualized as a ring and each of the node in this ring is responsible for a subset of all the data and it's called the token range.
So in this night naive example we have a total possible token values from 0 to 19 and each node is responsible for a quarter of them.
so when a request comes in it's going to have a primary key or partition key value the reason there is always going to be a partition key is because because cassandra tables sorry Cassandra schemas require you to specify a partition key for every single table.
So in this case the part the partition key is foo and one of the node is going to be picked at the coordinator node the job of the coordinator node is to hash this partition key converted into a token value and depending on what this token value is the coordinator is going to forward this information this request to the node that is responsible for writing this but what if this note si dies then this is no longer thought tolerant.
so the way Cassandra's softest is by increasing the replication factor this example here has a replication factor of 1 in reality we it typically has a reputation factor of 3 with the replication factor of 3 the way the cassandra' distributed this this token range is by walking along this token ring and then basically replicate this range to its neighbors until the replication factor has reached there are more sophisticated of distribution but this is just a naive example and with this approach now this when the coordinator is forwarding the data stream of these 4 nodes are actually going to all store this data.
so now we don't have to worry about not being able to write when one of the node is down how does this relate to CDC well there is actually also a right ahead login every single one of these node in the cluster and this is called a commit log in Cassandra this commit log will only record the data the rights that are specific to that note and then the way we can actually handle CDC is that we can put one agent a CDC agent in each of these node and this agent is going to be responsible for reading the data from this commit log and sending them off into Kafka in fact since cassandra is 3.0 they actually introduced a feature a CDC feature and this feature provides us with a file reader and the file read Handler and the handler is already deserialized this information from the commit log.
So we thought all we have to do then is to take this mutation which would is what the color change of event extract the data that we care about converting to a bro package it and then send it off to Kafka but as you're probably already thinking there are a couple problem with this approach first of all we get duplicated change of event because we have a replication factor of three when we're reading from all these locks we're going to get three copies of all the data.
So somewhere down in our pipeline we need to figure out how to do the deduplication second problem is out of order events this Y is a little bit more subtle because we're dealing with distributed system here it is possible that when two different clients are writing to the same row at the same time but to do two different values in this case maybe one client is changing the first name to N and the other clients changing the first name to Alice and not want to note to receive Alice first and then end while notes three receives and first and then Alice now these three different notes actually have a different understanding of what's the most recent data the way cassandra cleverly hen doses is using the concept of last right wing.
So when a client is sending a request they actually generate a client-side timestamp and this time stem gets propagated into every single column of these of this row of the data.
So this way when the client is reading the data from these nodes if it sees the discrepancy between two or more notes it's going to always take the latest the row is the latest timestamp but because our CDC pipe line is outside of the read path of Cassandra we have to basically figure out how to do this ourselves third problem is incomplete change of event Cassandra is optimized for write.
so unlike MySQL where it's going to do a read before every single right Cassandra is just going to blindly write the data into the database and because of this we're only going to know the columns that have changed we're not going to know all the rest of the rest of that a rest of the columns of that row and because of this are our mutate or sorry not aging our change of events is incomplete and we need to somehow figure out how to piece together this information in our pipeline and a first problem is unlocked schema change.
So Kassandra um does have you can modify your schema in Cassandra however it used a completely different readwrite paths from a data change event it uses gossip protocol to handle or propagate a schema change this means that this data is never going to be recorded into the commit log.
so if we're only listening to the commit log we're not going to be to know about any schema change our current solution that we're working on we call it a bridging the gap' solution is that we're going to ignore all the problems at least at least until the data get into bigquery.
so basically the agents just going to parse all of these data send it off to Kafka Kafka is gonna send all of these data into bigquery everything in bigquery is unordered is duplicated and it's incomplete but then we're going to heavily leveraged bigquery revealed view to handle all of this in order for bigquery to know how to do this it needs a little bit more information it's not only going to store the value of every single column it's also going to record the timestamp which is when the data is updated it's going to record at lesion timestamp in the case the data is deleted and it's also going to create a boolean field or record a boolean field which is the east primary boolean that just represents whether this column is a primary field or not.
so let's take a look at the data now that we have stored them into bigquery this query specifically looks at the first name column and if we want to also query for the last name column we are getting notice that the second row is now and that's because the second event is just an update.
So we only updated first-name this is not quite useful because what we actually want is the second event for a first name but the but the first event for last name.
So the way we can handle this is basically by looking at the timestamp field compare them and find the one with the latest time them and then we can return the user or recreate a view that returns the user with the data that's been deduplicated it's being ordered and it's complete and in order to do this we have two heavily leveraged Vickery including its UDF's as well as a lot of like like what I'm thinking group I and.
So on there are some advantage to this approach the first advantage is quick iteration because we basically didn't change any senior pipeline and we're doing all the heavy lifting bigquery and bigquery view is very cheap to create to modify to delete.
So then we can as we experiment with Cassandra we can basically modify the view as necessary the second benefit is that there's very few operational overhead notice aside from the Cassandra CDC agent we didn't introduce anything new.
So this way as we're solving this problem we don't want to be thinking about the the uptime of other services or other application that help out students for this pipeline and finally because we're leveraging off the base table in bigquery we're not going to impact Cassandra production because we don't have to basically on every write read back into Cassandra to get the full row because all of our data are already in bigquery but of course it comes at a cost the most the biggest the first cost is it's very expensive because this means every time a user is querying for this view we have to do all of this piecing the data together and it's it's going to get very expensive on top of this we're recording a replication factor of three which means that it's going to amplify and the table is going to get really big really fast.
So we'd have to do some maintenance work in order to minimize this view and the way to do compaction is by just materializing this view periodically but it is going to be an opera another overhead and finally notice we've only solved this problem for bigquery which means that if any other downstream derived system is trying to read from this data they're out of luck the base have to re-implement all of this themselves and that's not quite ideal.
So for a sake of completion I've included a potential future solution that's that we're considering it's a little bit more complicated because now it introduces stream processing engine introduces a cache a database and a second Kafka.
So let's go through how this would work the message are still going to arrive into Kafka duplicated and out of order the first thing the stream processing engine is going to do is by checking against the cache to see whether this data has been processed or not if it has been been processed then we will process this otherwise we can drop the message next is the stream processing engine is going to check against the database it's going to notice whether the timestamp or it's going to compare whether the timestamp of what's in the database against the timestamp of this event and in the case where we have an oder timestamp in our event we can drop it as well and finally because we've done a read on this database we now get both the before and the after of every single event.
So we can send this complete information into our second Kafka now when Kafka's can can then send this information into kcb queue which then can propagate into bigquery and the benefit here is that if we have any other derived system that are reading from Kafka they now have a much nicer outcome.
So in summary there's three things I'm trying to I guess get through to for this talk the first thing is that database as a stream of change event is a really natural and useful concept it would make a lot of sense for every single database out there to be able to provide a city's sip interface for the data to to be sent into other derived systems because otherwise we're talking about a very closed system where the database expects that this is going to be the final destination and the data is not going to go anywhere else and that's kind of selfish the second the second point is that lock centric architecture is at the heart of streaming data pipelines it helped us solve a lot of problems when it comes to distributed transactions and it's and it's very simple to implement and understand and finally CDC for peer-to-peer databases is not trivial as you've probably already noticed however we're hoping as the tools gets better and as our understanding of these databases gets better it will become easier over time some additional information if you're interesting our MySQL to bigquery pipeline there is a blog post on our website that basically explains it in a little bit more details I've also included the case ebq github link in case you're interested in using that
Finally the last piece is actually a blog post that my colleague has wrote this morning.
It talks about schema evolution in this in the case where it breaks backwards compatibility because arrows we can use arrows for an a backward compatibility to deal with schemas that do that are compatible.
But what happens if you have data that are not - if you made a change that is not compatible in the database.
So the last point kind of talks goes a little bit more into that and I think it's super interesting and relevant for CDC and that's end of my talk.

I have a question can I start with a question.
So for the future work you have a day to be sitting on the side.

I have two questions one is.
So you could hydrate by just reading directly from one of the source databases yes.
So so the reason we don't want to read directly from the source is because we don't want to impact the production of the source database it is possible to create a second cluster a Cassandra cluster that is made specifically for the CDC purpose but which is kind of what this could potentially be as well.
So but you have to keep it in sync with the sources right oh.
So it's okay if it's asynchronous because we are for every single table it's essentially serialized.
So then we know that it's going to be in order okay well what do you think about writing the event from the application itself because we've implemented the future solution that you showed here yeah using events in the application right - Cassandra right - Kafka and then we omit two events before and after into Kafka and then we use the stream processing engine within doing do you hand a lot of partners and then distribute the updates to multiple databases yeah I think yes.
So the one of the problem that we're seeing is like well there is the distributed transaction problem.
So you guys have potentially stopped that then that's great but the the other problem is that we do want to be able to get the before and after anything the MySQL case if we were to use if we were to use this event sourcing approach then we only get the column that have changed.
So that was something we're trying to avoid but in this case with Cassandra it's simply not possible because the database itself doesn't do read before right.
So that's also why we're kind of this is kind of an event sourcing approach okay.
So now I kind of understand we're saying.
So you're talking about why not just to update Kafka first and then and then basically works with Cassandra you're not you don't have to worry about multiple copies and stuff before you write - Cassandra you write into them - Kafka and then once it's successfully write another event after and another thing is if you are using Cassandra for for any kind of like transactional things where you care about read your own right consistency that could potentially become a problem I think where you need to guarantee that every time you're reading from the database it's as it's the latest thing it's something it has what you've written already what's the yeah we can take it all by after what's the motivation for going to Cassandra given that it sounds like this is quite an effort to go to it is bigquery not sufficient or what's the limitation there.
So we want to use the Cassandra more in the sense of a production database big queries a star in the sense of like yeah like OLTP database whereas bigquery is more.
So for analytical database ola p.
So we want to optimize for right and cassandra is our best contender for that.
So I had a quick question about the caching that essentially materializes the view of the row within the cache right.
So how long do you know how do you know how long to keep that cash yeah.
So the cache is kind of going to be like an optimization but it's not going to be like a source of truth because it is possible say you've set your TTL to 30 minutes but for whatever reason some one of the note is down for a longer amount of time then you can get the data later but the database can then catch those problems by the time of day to get there.
So hi just a quick question could you not.
So it's just listening through the future solution for Cassandra when you will get three copies of the data and out of order as well at times could you not just use one of the replicas as master and you could use zookeeper for keeping that state and just have that one like a push it out.
So that's actually something we considered where we would actually coordinate the different agents so that only one of them is sending the message.
The problem is that Cassandra is meant to be a peer-to-peer database and it's meant where all the notes should be equal.
If we're started to introduce zookeeper into the picture it's a little bit against Cassandra's philosophy which is that any note can be taken up or down.
Because now we're basically setting one of the notes to be the master and it's not definitely possible but the reason we're not considering is because we kind of want to follow what cassandra is known for which is the this whole like peer to peer everyone is thinking do you do write three write equals three and all right right now we do yeah just curious thanks to the great talk just curious if you think there'll be any one people to build downstream applications off some of these streams or if it all goes to analytics I've seen some interesting use cases of using this to actually generate other applications yeah I think it's definitely possible which is why we want to have this future solution that allows the other system to be able to read from Kafka if the only thing we care about with analytics then our existing pipeline could kind of work for a while.

I'm curious if you ever end up missing events due to like a network failure talking to Kafka or something like that and if So how do you deal with that.
So that's a good question a lot of things we're dealing right now are all in PLC's.
So we haven't had like the the spend a lot of time and effort in terms of guaranteeing that our messages are not lost and whatnot I think it's potentially possible as I've heard about similar scenario in other pipelines before with Kafka.
So but it will probably get a clearer answer as we experiment more with this pipeline.

So my question is you're paying lost a lot of the data duplication with a view on bigquery how how much of a performance penalty are you incurring by like lazily evaluating the data this way it's it's.
So that's something that's just going to get worse over time we are kerning a process building this.
So I don't have a good lot of numbers for you but it is definitely pretty expensive the query is great because it's able to do a parallel execution but even with sad we are it is the concern that it would put we could potentially take way too long for single query to do which is why we're hoping compaction could help us down the road but yeah thank you I can't I don't have a good business trade-off you think like whether or not to throw away the outdated expense right it's going the query cost is based off execution.
So this is going to get expensive yeah thank you.
So one question is if you do in this metaphor model but like if you are cash and use the windowing and stream processor you could probably do there at least for a time window data right.
yeah Cassandra itself actually has a TTL feature.
So if we actually want to use Cassandra as this intermediate data base it's possible as well this is in more in line with someone who had asked a question before if data consistency is such a big requirement or on here what is the rationale for using an eventual thing like Cassandra yeah that's
That's a really good question. I think like we are because we're building a data pipeline we want to optimize for different use cases.
So maybe for one user their goal is to use CAF to use Cassandra for write only and another might be using Cassandra for something that's a little bit more consistent which are we're trying to make a more generic solution essentially that covers all these cases but it's it's true though yeah.
So you are in you're in this picture you are envisioning heterogeneous sources like Cassandra and other MySQL and things like that oh no.
So this pipeline is specifically for Cassandra

* LISA18 - Introducing Reliability Toolkit: Easy-to-Use Monitoring and Alerting
:PROPERTIES:
:CREATED:  [2019-03-11 Mon 16:45]
:lg-subject: LISA18 - Introducing Reliability Toolkit: Easy-to-Use Monitoring and Alerting
:END:

https://youtu.be/cWsyWje6i08

* Managing Data in Microservices
:PROPERTIES:
:CREATED:  [2019-03-11 Mon 16:46]
:lg-subject: Managing Data in Microservices
:END:

https://youtu.be/E8-e-3fRHBw

* Stop Looking for Inspiration: Be Your Own Muse! - Lauren Hom
:PROPERTIES:
:CREATED:  [2019-03-11 Mon 16:48]
:lg-subject: Stop Looking for Inspiration: Be Your Own Muse! - Lauren Hom
:END:

https://youtu.be/G0U63muHU4k

* The End of the Universe - with Geraint Lewis
:PROPERTIES:
:CREATED:  [2019-03-11 Mon 18:54]
:lg-subject: The End of the Universe - with Geraint Lewis
:END:

https://youtu.be/IF4UhElRUFg

* Linguistics, Style and Writing in the 21st Century - with Steven Pinker
:PROPERTIES:
:CREATED:  [2019-03-11 Mon 18:54]
:lg-subject: Linguistics, Style and Writing in the 21st Century - with Steven Pinker
:END:

https://youtu.be/OV5J6BfToSw

* Eugenia Cheng: "The Art of Logic: How to Make Sense in a World that Doesn't" | Talks at Google
:PROPERTIES:
:CREATED:  [2019-03-11 Mon 18:56]
:lg-subject: Eugenia Cheng: "The Art of Logic: How to Make Sense in a World that Doesn't" | Talks at Google
:END:

https://youtu.be/YHZKX0H6cUE

* Understanding Human Nature with Steven Pinker - Conversations with History
:PROPERTIES:
:CREATED:  [2019-03-11 Mon 19:00]
:lg-subject: Understanding Human Nature with Steven Pinker - Conversations with History
:END:

https://youtu.be/KJ9Ad6s8g7I

* Eugenia Cheng: To Infinity - and Beyond
:PROPERTIES:
:CREATED:  [2019-03-11 Mon 19:01]
:lg-subject: Eugenia Cheng: To Infinity - and Beyond
:END:

https://youtu.be/cCn45UAjIzI

* Svět prvoků aneb Kde se skrývá většina eukaryotické diverzity?
:PROPERTIES:
:CREATED:  [2019-03-11 Mon 19:03]
:lg-subject: Svět prvoků aneb Kde se skrývá většina eukaryotické diverzity?
:END:

https://youtu.be/TdbrWqd4OAA

* Intro to Regex: Bend Text to Your Whim with Henry Marshall
:PROPERTIES:
:CREATED:  [2019-03-12 Tue 05:35]
:lg-subject: Intro to Regex: Bend Text to Your Whim with Henry Marshall
:END:

https://youtu.be/DDpNyYWehM8

* App modernization and the need for API management
:PROPERTIES:
:CREATED:  [2019-03-12 Tue 05:35]
:lg-subject: App modernization and the need for API management
:END:

https://youtu.be/25JjzE7t17o

* AppSecCali 2019 - Cloud Forensics: Putting The Bits Back Together
:PROPERTIES:
:CREATED:  [2019-03-12 Tue 05:38]
:lg-subject: AppSecCali 2019 - Cloud Forensics: Putting The Bits Back Together
:END:

https://youtu.be/nQHmiCFqrRE

* Git & version control in the enterprise - Git Merge 2019
:PROPERTIES:
:CREATED:  [2019-03-12 Tue 16:57]
:lg-subject: Git & version control in the enterprise - Git Merge 2019
:END:

https://youtu.be/SzEBzQrwxFk

* What I learnt by building the exact same app in Kotlin (Native Android), Nativescript and Flutter
:PROPERTIES:
:CREATED:  [2019-03-12 Tue 16:58]
:lg-subject: What I learnt by building the exact same app in Kotlin (Native Android), Nativescript and Flutter
:END:

https://youtu.be/NTWVsPvYPQE

* Standard Model Representaion  by Cohl Furey
:PROPERTIES:
:CREATED:  [2019-03-12 Tue 16:58]
:lg-subject: Standard Model Representaion  by Cohl Furey
:END:

https://youtu.be/sfg8-KjvnpM

* Pavel Krtouš - Einsteinova speciální teorie relativity (MFF FJDP 7.3.2019)
:PROPERTIES:
:CREATED:  [2019-03-12 Tue 16:59]
:lg-subject: Pavel Krtouš - Einsteinova speciální teorie relativity (MFF FJDP 7.3.2019)
:END:

https://youtu.be/40lHDsTXvlY

* Frontend vs Backend vs Full Stack developer - Who are you?
:PROPERTIES:
:CREATED:  [2019-03-12 Tue 18:56]
:lg-subject: Frontend vs Backend vs Full Stack developer - Who are you?
:END:

https://youtu.be/ITW79KNwiuc

* 10 Do’s for DevOps!
:PROPERTIES:
:CREATED:  [2019-03-13 Wed 05:38]
:lg-subject: 10 Do’s for DevOps!
:END:

https://youtu.be/um-A4qQut7g

* SnowFROC 2019
:PROPERTIES:
:CREATED:  [2019-03-15 Fri 06:40]
:lg-subject: SnowFROC 2019
:END:

https://youtu.be/_H7mp9lwFeo

* https://www.google.cz/url?sa=t&source=web&rct=j&url=https://m.youtube.com/watch%3Fv%3DDdJNLeYldUs&ved=2ahUKEwjI36GO-o7hAhUFmrQKHQEKCXIQt9IBMAd6BAg0EBA&usg=AOvVaw13DtZuZewxIUt6zDy2zJzA
:PROPERTIES:
:CREATED:  [2019-03-19 Tue 20:39]
:END:

* https://www.google.cz/url?sa=t&source=web&rct=j&url=https://m.youtube.com/watch%3Fv%3DmS0AJLqmnvQ&ved=2ahUKEwjI36GO-o7hAhUFmrQKHQEKCXIQt9IBMAZ6BAg0EAs&usg=AOvVaw3RlZE7BN5zZMCFUPTWZwmX
:PROPERTIES:
:CREATED:  [2019-03-19 Tue 20:39]
:END:

* Day Two Kubernetes: Tools for Operability
:PROPERTIES:
:CREATED:  [2019-03-21 Thu 05:33]
:lg-subject: Day Two Kubernetes: Tools for Operability
:END:

https://youtu.be/ujg2UuBm-Rs

* Haskell Live-Coding, Session 1, Commutativity
:PROPERTIES:
:CREATED:  [2019-03-21 Thu 05:33]
:lg-subject: Haskell Live-Coding, Session 1, Commutativity
:END:

https://youtu.be/Nv5tf8pvgrY

* AppSecCali 2019 - (in)Secure Development - Why some product teams are great and others … aren’t...
:PROPERTIES:
:CREATED:  [2019-03-21 Thu 05:38]
:lg-subject: AppSecCali 2019 - (in)Secure Development - Why some product teams are great and others … aren’t...
:END:

https://youtu.be/-bZM_48Ghv0

* Value Stream Management  Is Your Organization Ready
:PROPERTIES:
:CREATED:  [2019-03-21 Thu 05:39]
:lg-subject: Value Stream Management  Is Your Organization Ready
:END:

https://youtu.be/GvJAoMXRA2E

* What Haskell taught us when we were not looking! by Eric Torreborre
:PROPERTIES:
:CREATED:  [2019-03-21 Thu 18:39]
:lg-subject: What Haskell taught us when we were not looking! by Eric Torreborre
:END:

https://youtu.be/aNL3137C74c

* Compositional UIs - the Microservices Last Mile - Jimmy Bogard
:PROPERTIES:
:CREATED:  [2019-03-21 Thu 18:40]
:lg-subject: Compositional UIs - the Microservices Last Mile - Jimmy Bogard
:END:

https://youtu.be/gjtFGx0yX5M

* How My Dad Taught Me to Code - Ari Hunt & Troy Hunt
:PROPERTIES:
:CREATED:  [2019-03-21 Thu 18:42]
:lg-subject: How My Dad Taught Me to Code - Ari Hunt & Troy Hunt
:END:

https://youtu.be/S1ldaxeznRE

* Alternative Ways To Think About Serverless - Chris Priest
:PROPERTIES:
:CREATED:  [2019-03-21 Thu 18:43]
:lg-subject: Alternative Ways To Think About Serverless - Chris Priest
:END:

https://youtu.be/XPs5WGCgK_I

* Category Theory, The essence of interface-based design - Erik Meijer
:PROPERTIES:
:CREATED:  [2019-03-21 Thu 18:43]
:lg-subject: Category Theory, The essence of interface-based design - Erik Meijer
:END:

https://youtu.be/JMP6gI5mLHc

* scale.bythebay.io: Adelbert Chang, The Functor, Applicative, Monad talk
:PROPERTIES:
:CREATED:  [2019-03-21 Thu 18:44]
:lg-subject: scale.bythebay.io: Adelbert Chang, The Functor, Applicative, Monad talk
:END:

https://youtu.be/L0aYcq1tqMo

* Structure and Interpretation of Test Cases - Kevlin Henney
:PROPERTIES:
:CREATED:  [2019-03-21 Thu 18:44]
:lg-subject: Structure and Interpretation of Test Cases - Kevlin Henney
:END:

https://youtu.be/Bi3OfSKTJXI

* Kubernetes Pipelines   Hello New World
:PROPERTIES:
:CREATED:  [2019-03-21 Thu 21:08]
:lg-subject: Kubernetes Pipelines   Hello New World
:END:

https://youtu.be/IYBoognlKoE

* Life of a packet through Istio by Matt Turner
:PROPERTIES:
:CREATED:  [2019-03-21 Thu 21:08]
:lg-subject: Life of a packet through Istio by Matt Turner
:END:

https://youtu.be/cB611FtjHcQ

* Twelve Ways to Make Code Suck Less
:PROPERTIES:
:CREATED:  [2019-03-21 Thu 21:11]
:lg-subject: Twelve Ways to Make Code Suck Less
:END:

https://youtu.be/QiaDztJZO5Q

* AppSecCali 2019 Lightning Talk - Creating Accessible Security Testing with ZAP
:PROPERTIES:
:CREATED:  [2019-03-21 Thu 23:01]
:lg-subject: AppSecCali 2019 Lightning Talk - Creating Accessible Security Testing with ZAP
:END:

https://youtu.be/2okRekOicpg

* GOTO 2018 • Event-Driven Microservices - not (just) about Events! • Allard Buijze
:PROPERTIES:
:CREATED:  [2019-03-22 Fri 18:59]
:lg-subject: GOTO 2018 • Event-Driven Microservices - not (just) about Events! • Allard Buijze
:END:

https://youtu.be/DzGuDNHsOQ0

* Microservices Gone Wrong
:PROPERTIES:
:CREATED:  [2019-03-23 Sat 05:04]
:lg-subject: Microservices Gone Wrong
:END:

https://youtu.be/DlEXHqtj2dA

* RX Java: Reactive extensions for the JVM - NUS Hackers
:PROPERTIES:
:CREATED:  [2019-03-23 Sat 14:53]
:lg-subject: RX Java: Reactive extensions for the JVM - NUS Hackers
:END:

https://youtu.be/d1XzfHKOG1k

* Simplicity Is Not Simple
:PROPERTIES:
:CREATED:  [2019-03-24 Sun 06:01]
:lg-subject: Simplicity Is Not Simple
:END:

https://youtu.be/9hohuqj-yI8

* Org-mode, literate programming in Emacs
:PROPERTIES:
:CREATED:  [2019-03-24 Sun 13:35]
:lg-subject: Org-mode, literate programming in Emacs
:END:

https://youtu.be/GK3fij-D1G8

* Podívejte se na video „Practical Security for Web Applications - Chris Holland“ na YouTube
:PROPERTIES:
:CREATED:  [2019-03-26 Tue 10:40]
:END:

https://youtu.be/9OuqyVYsUuA

* Podívejte se na video „Finding your service boundaries - a practical guide - Adam Ralph“ na YouTube
:PROPERTIES:
:CREATED:  [2019-03-26 Tue 19:01]
:END:

https://youtu.be/jdliXz70NtM

* Podívejte se na video „[VDZ19] Frontend Monoliths: Run if you can! by Jonas Bandi and Daniel Wiehl“ na YouTube
:PROPERTIES:
:CREATED:  [2019-03-26 Tue 19:03]
:END:

https://youtu.be/9SG2lI5_t1Q

* Podívejte se na video „[VDZ19] Eta lang - Haskell On JVM by Jarek Ratajski“ na YouTube
:PROPERTIES:
:CREATED:  [2019-03-26 Tue 19:04]
:END:

https://youtu.be/7U9rDg4Pfdc

* Podívejte se na video „[VDZ19] Don't Walk Away From Complexity, Run by Venkat Subramaniam“ na YouTube
:PROPERTIES:
:CREATED:  [2019-03-26 Tue 19:04]
:END:

https://youtu.be/0ruRoW5P9wg

* Podívejte se na video „[VDZ19] Service Mesh and Sidecars with Istio and Envoy by Rafael Benevides“ na YouTube
:PROPERTIES:
:CREATED:  [2019-03-26 Tue 19:04]
:END:

https://youtu.be/KLBFR_rUreE

* Podívejte se na video „[VDZ19] Kubernetesize your Java application by Arun Gupta“ na YouTube
:PROPERTIES:
:CREATED:  [2019-03-26 Tue 19:05]
:END:

https://youtu.be/CieoGJCXEE8

* Podívejte se na video „[VDZ19] 10 Reasons Why we Love Some APIs and Why we Hate Some Others by Lukas Eder“ na YouTube
:PROPERTIES:
:CREATED:  [2019-03-26 Tue 19:05]
:END:

https://youtu.be/CYniPcoiI5g

* Podívejte se na video „The Enterprise DevOps Challenge - Roy Osherove“ na YouTube
:PROPERTIES:
:CREATED:  [2019-03-26 Tue 19:08]
:END:

https://youtu.be/bYKmq_sTsRw

* Podívejte se na video „Using Service Meshes and Kubernetes to Solve Service-to-Service Communications... - Ben Hall“ na YouTube
:PROPERTIES:
:CREATED:  [2019-03-29 Fri 17:23]
:END:

https://youtu.be/ZKchdjFSgbM

* Podívejte se na video „Versioning 1.0.1 - Jon Skeet“ na YouTube
:PROPERTIES:
:CREATED:  [2019-03-29 Fri 17:29]
:END:

https://youtu.be/QA1RvnXKKdY

* Podívejte se na video „Haskell - NUS Hackers“ na YouTube
:PROPERTIES:
:CREATED:  [2019-03-30 Sat 08:22]
:END:

https://youtu.be/Q9DwbUmfPcM

* Pointer Compression in V8
:PROPERTIES:
:CREATED:  [2020-02-03 Mon 06:05]
:END:

Pointer Compression in V8 - https://blog.infosectcbr.com.au/2020/02/pointer-compression-in-v8.html

* How to create presentations with emacs-reveal
:PROPERTIES:
:CREATED:  [2020-02-03 Mon 12:02]
:END:

https://oer.gitlab.io/emacs-reveal-howto/#/sec-title-slide

* Things I Believe About Software Engineering
:PROPERTIES:
:CREATED:  [2020-02-03 Mon 18:03]
:END:

Things I Believe About Software Engineering - https://blog.wesleyac.com/posts/engineering-beliefs

* Chrome's Changes Could Break Your App- Prepare for SameSite Cookie Updates
:PROPERTIES:
:CREATED:  [2020-02-04 Tue 05:16]
:END:

Chrome's Changes Could Break Your App- Prepare for SameSite Cookie Updates - https://blog.heroku.com/chrome-changes-samesite-cookie

* Show HN: CTOnet, a private community for CTOs and engineering leaders
:PROPERTIES:
:CREATED:  [2020-02-04 Tue 05:22]
:END:

Show HN: CTOnet, a private community for CTOs and engineering leaders - https://ctonet.io/about

* Package httpretty prints the HTTP requests you make with Go on your terminal
:PROPERTIES:
:CREATED:  [2020-02-04 Tue 05:28]
:END:

Package httpretty prints the HTTP requests you make with Go on your terminal - https://github.com/henvic/httpretty

* Watch "Complex Adaptive Systems - Dave Snowden - DDD Europe 2018" on YouTube
:PROPERTIES:
:CREATED:  [2020-02-04 Tue 16:49]
:END:

https://youtu.be/l4-vpegxYPg

* Over 550 videos of 870 talks from FOSDEM 2020 have now been uploaded
:PROPERTIES:
:CREATED:  [2020-02-05 Wed 22:43]
:END:

Over 550 videos of 870 talks from FOSDEM 2020 have now been uploaded - https://fosdem.org/2020/schedule/events/

* Fun with Decorators, Protobuf and Apache Beam
:PROPERTIES:
:CREATED:  [2020-02-07 Fri 02:57]
:END:

Fun with Decorators, Protobuf and Apache Beam - https://building.enlyze.com/posts/apache-beam-python-protobuf-decorater/

* A common mistake involving wildcards and the find command
:PROPERTIES:
:CREATED:  [2020-02-09 Sun 06:53]
:END:

A common mistake involving wildcards and the find command - https://blog.robertelder.org/find-command-wildcard-globbing/

* Moore's Law, Microprocessors, Abstractions, First Principles [video]
:PROPERTIES:
:CREATED:  [2020-02-09 Sun 07:08]
:END:

Moore's Law, Microprocessors, Abstractions, First Principles [video] - https://www.youtube.com/watch?v=Nb2tebYAaOA

* Haskell in Production: Riskbook
:PROPERTIES:
:CREATED:  [2020-02-13 Thu 05:41]
:END:

Haskell in Production: Riskbook - https://serokell.io/blog/haskell-in-industry-riskbook

* Flowcharts of programming language constructs
:PROPERTIES:
:CREATED:  [2020-02-14 Fri 20:02]
:END:

Flowcharts of programming language constructs - https://www.progsbase.com/blog/flow-charts-of-programming-language-constructs/

* Classification of the Principal Programming Paradigms
:PROPERTIES:
:CREATED:  [2020-02-15 Sat 16:38]
:END:

Classification of the Principal Programming Paradigms - https://www.info.ucl.ac.be/~pvr/paradigms.html

* Gentzen's Rules for Natural Deduction
:PROPERTIES:
:CREATED:  [2020-02-15 Sat 16:43]
:END:

Gentzen's Rules for Natural Deduction - https://blog.plover.com/math/logic/lk.html

* How to take smart notes with Org mode
:PROPERTIES:
:CREATED:  [2020-02-16 Sun 03:43]
:END:

How to take smart notes with Org mode - https://blog.jethro.dev/posts/how_to_take_smart_notes_org/

* How These Things Work – A book about CS from first principles (2016)
:PROPERTIES:
:CREATED:  [2020-02-17 Mon 19:16]
:END:

How These Things Work – A book about CS from first principles (2016) - http://reasonablypolymorphic.com/book/preface

* JWT is Awesome
:PROPERTIES:
:CREATED:  [2020-02-19 Wed 05:37]
:END:

JWT is Awesome - https://thehftguy.com/2020/02/18/jwt-is-awesome-heres-why/

* The Bash Hackers Wiki
:PROPERTIES:
:CREATED:  [2020-02-22 Sat 07:34]
:END:

The Bash Hackers Wiki - https://wiki.bash-hackers.org/

* Watch "Ben Anderson - Investing in Testing with Reason" on YouTube
:PROPERTIES:
:CREATED:  [2020-02-22 Sat 08:29]
:END:

https://youtu.be/Um-c6gDuLWw

* Streaming Data Changes to a Data Lake with Debezium and Delta Lake Pipeline
:PROPERTIES:
:CREATED:  [2020-02-23 Sun 04:11]
:END:

Streaming Data Changes to a Data Lake with Debezium and Delta Lake Pipeline - https://github.com/tikal-fuseday/delta-architecture

* Show HN: A Hitchhikers Guide to Asynchronous Programming
:PROPERTIES:
:CREATED:  [2020-02-29 Sat 05:48]
:END:

Show HN: A Hitchhikers Guide to Asynchronous Programming - https://github.com/crazyguitar/pysheeet/blob/master/docs/appendix/python-concurrent.rst

* Implementing Raft: Part 2: Commands and Log Replication
:PROPERTIES:
:CREATED:  [2020-03-01 Sun 06:33]
:END:

Implementing Raft: Part 2: Commands and Log Replication - https://eli.thegreenplace.net/2020/implementing-raft-part-2-commands-and-log-replication/

* Capability Immaturity Model
:PROPERTIES:
:CREATED:  [2020-03-02 Mon 17:29]
:END:

Capability Immaturity Model - https://en.wikipedia.org/wiki/Capability_Immaturity_Model

* Postgres Explain Visualizer
:PROPERTIES:
:CREATED:  [2020-03-03 Tue 10:00]
:END:

Postgres Explain Visualizer - https://github.com/dalibo/pev2

* Introduction to D3
:PROPERTIES:
:CREATED:  [2020-03-04 Wed 06:28]
:END:

Introduction to D3 - https://observablehq.com/@mitvis/introduction-to-d3

* Landmark Computer Science Proof Cascades Through Physics and Math
:PROPERTIES:
:CREATED:  [2020-03-05 Thu 03:04]
:END:

Landmark Computer Science Proof Cascades Through Physics and Math - https://www.quantamagazine.org/landmark-computer-science-proof-cascades-through-physics-and-math-20200304/

* New Guides for Terraform Modules
:PROPERTIES:
:CREATED:  [2020-03-07 Sat 13:49]
:END:

New Guides for Terraform Modules - https://www.hashicorp.com/blog/new-guides-terraform-modules/

* On the shoulders of the giants
:PROPERTIES:
:CREATED:  [2020-03-08 Sun 20:45]
:END:

https://lpalmieri.com/posts/2020-03-08-on-the-shoulders-of-the-giants/

* Raft Is So Fetch: The Raft Consensus Algorithm Explained Through Mean Girls
:PROPERTIES:
:CREATED:  [2020-03-08 Sun 22:23]
:END:

Raft Is So Fetch: The Raft Consensus Algorithm Explained Through Mean Girls - https://www.cockroachlabs.com/blog/raft-is-so-fetch/

* How a 'growth mindset' can lead to success
:PROPERTIES:
:CREATED:  [2020-03-13 Fri 07:31]
:END:

How a 'growth mindset' can lead to success - https://www.bbc.com/worklife/article/20200306-the-surprising-truth-about-finding-your-passion-at-work

* Understanding HTTPS and PKI for busy folks
:PROPERTIES:
:CREATED:  [2020-03-15 Sun 12:55]
:END:

Understanding HTTPS and PKI for busy folks - https://www.reddit.com/r/security/comments/fiqg7g/understanding_https_and_pki_for_busy_folks/

* Kind - run local Kubernetes clusters using Docker
:PROPERTIES:
:CREATED:  [2020-03-16 Mon 22:13]
:END:

Kind - run local Kubernetes clusters using Docker - https://kind.sigs.k8s.io/

* OpenRefine – free, open source, powerful tool for working with messy data
:PROPERTIES:
:CREATED:  [2020-03-23 Mon 06:49]
:END:

OpenRefine – free, open source, powerful tool for working with messy data - https://openrefine.org

* AsyncAPI – OpenAPI-like specification for event-driven architectures
:PROPERTIES:
:CREATED:  [2020-03-30 Mon 18:43]
:END:

AsyncAPI – OpenAPI-like specification for event-driven architectures - https://github.com/asyncapi/asyncapi

* WireGuard 1.0.0
:PROPERTIES:
:CREATED:  [2020-03-30 Mon 18:43]
:END:

WireGuard 1.0.0 - https://lore.kernel.org/wireguard/CAHmME9qOpDeraWo5rM31EWQW574KEduRBTL-+0A2ZyqBNDeYkg@mail.gmail.com/T/#u

* Cognitive Biases in Software Development
:PROPERTIES:
:CREATED:  [2020-03-31 Tue 07:12]
:END:

Cognitive Biases in Software Development - http://smyachenkov.com/posts/cognitive-biases-software-development/

* Eclipse Theia 1.0 – Open-Source Alternative to Visual Studio Code
:PROPERTIES:
:CREATED:  [2020-03-31 Tue 19:04]
:END:

Eclipse Theia 1.0 – Open-Source Alternative to Visual Studio Code - https://www.eclipse.org/org/press-release/20200331-theia.php

* An Overview of Bayesian Inference (2019)
:PROPERTIES:
:CREATED:  [2020-04-02 Thu 02:04]
:END:

An Overview of Bayesian Inference (2019) - https://jaydaigle.net/blog/overview-of-bayesian-inference/

* A crash course in compilers (2018)
:PROPERTIES:
:CREATED:  [2020-04-03 Fri 06:00]
:END:

A crash course in compilers (2018) - https://increment.com/programming-languages/crash-course-in-compilers/

* Org-roam: Rudimentary Roam replica with Org-mode
:PROPERTIES:
:CREATED:  [2020-04-06 Mon 06:21]
:END:

Org-roam: Rudimentary Roam replica with Org-mode - https://github.com/jethrokuan/org-roam

* Convert Markdown to a Mind Map
:PROPERTIES:
:CREATED:  [2020-04-10 Fri 21:52]
:END:

Convert Markdown to a Mind Map - https://markmap.js.org/

* UTF-8 Everywhere
:PROPERTIES:
:CREATED:  [2020-04-14 Tue 22:33]
:END:

UTF-8 Everywhere - http://utf8everywhere.org/

* Show HN: Tail Recursion Optimization for the JVM
:PROPERTIES:
:CREATED:  [2020-04-23 Thu 06:35]
:END:

Show HN: Tail Recursion Optimization for the JVM - https://github.com/Sipkab/jvm-tail-recursion

* Books I recommend to my software engineering students
:PROPERTIES:
:CREATED:  [2020-04-24 Fri 03:19]
:END:

Books I recommend to my software engineering students - http://web.eecs.utk.edu/~azh/blog/booksformystudents.html

* Beginners guide to gateways and proxies
:PROPERTIES:
:CREATED:  [2020-04-27 Mon 17:19]
:END:

Beginners guide to gateways and proxies - https://www.learncloudnative.com/blog/2020-04-25-beginners-guide-to-gateways-proxies/

* Show HN: Xlskubectl – control your Kubernetes cluster with Google sheets
:PROPERTIES:
:CREATED:  [2020-04-27 Mon 17:27]
:END:

Show HN: Xlskubectl – control your Kubernetes cluster with Google sheets - https://github.com/learnk8s/xlskubectl

* Paxos vs. Raft: Have we reached consensus on distributed consensus?
:PROPERTIES:
:CREATED:  [2020-04-28 Tue 02:49]
:END:

Paxos vs. Raft: Have we reached consensus on distributed consensus? - https://arxiv.org/abs/2004.05074

* Deep dive into runc and OCI specifications
:PROPERTIES:
:CREATED:  [2020-04-28 Tue 17:13]
:END:

Deep dive into runc and OCI specifications - https://mkdev.me/en/posts/the-tool-that-really-runs-your-containers-deep-dive-into-runc-and-oci-specifications

* Manager's Playbook: Heuristics for effective management
:PROPERTIES:
:CREATED:  [2020-05-01 Fri 06:35]
:END:

Manager's Playbook: Heuristics for effective management - https://github.com/ksindi/managers-playbook

* Using PostgreSQL for JSON Storage
:PROPERTIES:
:CREATED:  [2020-05-01 Fri 06:57]
:END:

Using PostgreSQL for JSON Storage - https://info.crunchydata.com/blog/using-postgresql-for-json-storage

* OCaml is Pretty Great (2019)
:PROPERTIES:
:CREATED:  [2020-05-01 Fri 11:42]
:END:

OCaml is Pretty Great (2019) - https://blog.chewxy.com/2019/02/20/go-is-average/

* Domesticating Kubernetes
:PROPERTIES:
:CREATED:  [2020-05-01 Fri 11:49]
:END:

Domesticating Kubernetes - https://blog.quickbird.uk/domesticating-kubernetes-d49c178ebc41

* SSH hacks – a little sanity for remote workers
:PROPERTIES:
:CREATED:  [2020-05-01 Fri 12:46]
:END:

SSH hacks – a little sanity for remote workers - https://smallstep.com/blog/ssh-tricks-and-tips/

* CAP Twelve Years Later: How the "Rules" Have Changed
:PROPERTIES:
:CREATED:  [2020-05-02 Sat 09:32]
:END:

https://www.infoq.com/articles/cap-twelve-years-later-how-the-rules-have-changed/

* Awk in 20 Minutes
:PROPERTIES:
:CREATED:  [2020-05-02 Sat 10:53]
:END:

https://ferd.ca/awk-in-20-minutes.html

* Time on Unix
:PROPERTIES:
:CREATED:  [2020-05-02 Sat 12:57]
:END:

https://venam.nixers.net/blog/unix/2020/05/02/time-on-unix.html

* A Shallow Introduction to the K Programming Language (2002)
:PROPERTIES:
:CREATED:  [2020-05-03 Sun 07:42]
:END:

A Shallow Introduction to the K Programming Language (2002) - https://web.archive.org/web/20070519112242/http://www.kuro5hin.org/story/2002/11/14/22741/791

* The Best Medium-Hard Data Analyst SQL Interview Questions - Quip
:PROPERTIES:
:CREATED:  [2020-05-03 Sun 10:16]
:END:

https://quip.com/2gwZArKuWk7W

* Linux home directory management is about to undergo major change - TechRepublic
:PROPERTIES:
:CREATED:  [2020-05-03 Sun 20:40]
:END:

https://www.techrepublic.com/article/linux-home-directory-management-is-about-to-undergo-major-change/

* Systemd, ten years later: a historical and technical retrospective
:PROPERTIES:
:CREATED:  [2020-05-04 Mon 06:02]
:END:

Systemd, ten years later: a historical and technical retrospective - https://blog.darknedgy.net/technology/2020/05/02/0/

* A curated list for Kubernetes sources
:PROPERTIES:
:CREATED:  [2020-05-05 Tue 06:28]
:END:

A curated list for Kubernetes sources - https://github.com/ramitsurana/awesome-kubernetes

* Bringing GNU Emacs to native code [video]
:PROPERTIES:
:CREATED:  [2020-05-05 Tue 06:31]
:END:

Bringing GNU Emacs to native code [video] - https://toobnix.org/videos/watch/1f997b3c-00dc-4f7d-b2ce-74538c194fa7

* sfree: Learn sound theory with an acclaimed synth company
:PROPERTIES:
:CREATED:  [2020-05-05 Tue 16:06]
:END:

https://sfree.life/sound-theory-toyota-vangelis-bastl-instruments-free/

* Advanced programming languages
:PROPERTIES:
:CREATED:  [2020-05-05 Tue 16:11]
:END:

http://matt.might.net/articles/best-programming-languages/

* draft-ietf-oauth-security-topics-15 - OAuth 2.0 Security Best Current Practice
:PROPERTIES:
:CREATED:  [2020-05-06 Wed 06:19]
:END:

https://tools.ietf.org/html/draft-ietf-oauth-security-topics-15

* Evolution of Emacs Lisp [pdf]
:PROPERTIES:
:CREATED:  [2020-05-07 Thu 16:16]
:END:

Evolution of Emacs Lisp [pdf] - http://www.iro.umontreal.ca/~monnier/hopl-4-emacs-lisp.pdf

* Understanding Raft Consensus
:PROPERTIES:
:CREATED:  [2020-05-10 Sun 12:28]
:END:

Understanding Raft Consensus - https://www.micahlerner.com/2020/05/08/understanding-raft-consensus.html

* Meshroom – Open-source photogrammetry software
:PROPERTIES:
:CREATED:  [2020-05-10 Sun 12:30]
:END:

Meshroom – Open-source photogrammetry software - https://alicevision.org/#meshroom

* In Further Praise of Dependent Types
:PROPERTIES:
:CREATED:  [2020-05-11 Mon 12:38]
:END:

In Further Praise of Dependent Types - https://golem.ph.utexas.edu/category/2020/05/in_further_praise_of_dependent.html

* The Black Swan: Identify stocks that will see a boom because of virus: Nassim Nicholas Taleb - The Economic Times
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 07:25]
:END:

https://m.economictimes.com/markets/expert-view/identify-robust-stocks-that-will-boom-due-to-virus-nassim-nicholas-taleb/articleshow/75756955.cms

* What every software engineer should know about Apache Kafka
:PROPERTIES:
:CREATED:  [2020-05-17 Sun 15:14]
:END:

What every software engineer should know about Apache Kafka - https://www.michael-noll.com/blog/2020/01/16/what-every-software-engineer-should-know-about-apache-kafka-fundamentals/

* Extracting ROM constants from the 8087 math coprocessor's die
:PROPERTIES:
:CREATED:  [2020-05-17 Sun 15:18]
:END:

http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html?m=1

* Simple Haskell Is Best Haskell
:PROPERTIES:
:CREATED:  [2020-05-23 Sat 16:17]
:END:

Simple Haskell Is Best Haskell - https://medium.com/@fommil/simple-haskell-is-best-haskell-6a1ea59c73b

* Jepsen Disputes MongoDB's Data Consistency Claims
:PROPERTIES:
:CREATED:  [2020-05-24 Sun 12:19]
:END:

Jepsen Disputes MongoDB's Data Consistency Claims - https://www.infoq.com/news/2020/05/Jepsen-MongoDB-4-2-6/

* Loginsrv: JWT login microservice with back ends like OAuth2, Google, GitHub
:PROPERTIES:
:CREATED:  [2020-05-24 Sun 12:21]
:END:

Loginsrv: JWT login microservice with back ends like OAuth2, Google, GitHub - https://github.com/tarent/loginsrv

* I wrote a beginners guide to Kubernetes
:PROPERTIES:
:CREATED:  [2020-05-31 Sun 06:53]
:END:

I wrote a beginners guide to Kubernetes - https://www.learncloudnative.com/blog/2020-05-26-getting-started-with-kubernetes-part-1/

* Oracle vs. PostgreSQL – A Comment
:PROPERTIES:
:CREATED:  [2020-05-31 Sun 06:57]
:END:

Oracle vs. PostgreSQL – A Comment - https://www.postgresql.org/message-id/flat/0959C81A-5B07-4D04-A6B1-57AA78A9A553%40gmail.com

* Cache Oblivious Algorithms
:PROPERTIES:
:CREATED:  [2020-06-28 Sun 06:16]
:END:

Cache Oblivious Algorithms - https://jiahai-feng.github.io/posts/cache-oblivious-algorithms/

* Life is 90% of my use cases for org-mode
:PROPERTIES:
:CREATED:  [2020-06-29 Mon 07:08]
:END:

Life is 90% of my use cases for org-mode - http://stormrider.io/ninety-pct.html

* Org-roam: Emacs org file based personal knowledge base system
:PROPERTIES:
:CREATED:  [2020-07-03 Fri 19:55]
:END:

Org-roam: Emacs org file based personal knowledge base system - https://www.orgroam.com/

* The BEAM Book (2017)
:PROPERTIES:
:CREATED:  [2020-07-03 Fri 20:15]
:END:

The BEAM Book (2017) - https://blog.stenmans.org/theBeamBook/

* Queues are Databases (1995)
:PROPERTIES:
:CREATED:  [2020-07-04 Sat 08:46]
:END:

Queues are Databases (1995) - https://arxiv.org/abs/cs/0701158

* GitHub - canonical/multipass: Multipass orchestrates virtual Ubuntu instances
:PROPERTIES:
:CREATED:  [2020-07-05 Sun 06:49]
:END:

https://github.com/canonical/multipass

* A Deep Introduction to JIT Compilers: JITs are not very Just-in-time
:PROPERTIES:
:CREATED:  [2020-07-06 Mon 08:32]
:END:

A Deep Introduction to JIT Compilers: JITs are not very Just-in-time - https://carolchen.me/blog/jits-intro/

* Help Message for Shell Scripts
:PROPERTIES:
:CREATED:  [2020-07-08 Wed 06:31]
:END:

Help Message for Shell Scripts - https://samizdat.dev/help-message-for-shell-scripts/

* REST and GraphQL: An Architectural Comparison
:PROPERTIES:
:CREATED:  [2020-07-08 Wed 06:46]
:END:

REST and GraphQL: An Architectural Comparison - https://hasura.io/blog/rest-view-of-graphql

* A Typology of Dumplings (2019)
:PROPERTIES:
:CREATED:  [2020-07-11 Sat 06:25]
:END:

A Typology of Dumplings (2019) - https://borstell.github.io/dumplings.html

* CRDTs: The Hard Parts
:PROPERTIES:
:CREATED:  [2020-07-11 Sat 17:01]
:END:

CRDTs: The Hard Parts - https://martin.kleppmann.com/2020/07/06/crdt-hard-parts-hydra.html

* Everything you need to know about OAuth 2.0
:PROPERTIES:
:CREATED:  [2020-07-16 Thu 05:32]
:END:

Everything you need to know about OAuth 2.0 - https://gravitational.com/blog/everything-you-need-to-know-about-oauth/

* Systems Design for Advanced Beginners
:PROPERTIES:
:CREATED:  [2020-07-21 Tue 18:21]
:END:

Systems Design for Advanced Beginners - https://robertheaton.com/2020/04/06/systems-design-for-advanced-beginners/

* Bloomfilters debunked: Dispelling 30 Years of math with Coq
:PROPERTIES:
:CREATED:  [2020-07-25 Sat 10:13]
:END:

Bloomfilters debunked: Dispelling 30 Years of math with Coq - https://gopiandcode.uk/logs/log-bloomfilters-debunked.html

* Dividing front end from back end is an antipattern
:PROPERTIES:
:CREATED:  [2020-07-25 Sat 10:14]
:END:

Dividing front end from back end is an antipattern - https://www.thoughtworks.com/insights/blog/dividing-frontend-backend-antipattern

* The Eastland disaster killed more passengers than the Titanic and the Lusitania
:PROPERTIES:
:CREATED:  [2020-07-25 Sat 10:15]
:END:

The Eastland disaster killed more passengers than the Titanic and the Lusitania - https://www.smithsonianmag.com/history/eastland-disaster-killed-more-passengers-titanic-and-lusitania-why-has-it-been-forgotten-180953146/

* Indian IT consultancies struggle against technological obsolescence
:PROPERTIES:
:CREATED:  [2020-07-25 Sat 10:16]
:END:

Indian IT consultancies struggle against technological obsolescence - https://www.economist.com/business/2020/07/23/indian-it-consultancies-struggle-against-technological-obsolescence

* Bartosz Milewski’s Basics of Haskell – Code and exercises
:PROPERTIES:
:CREATED:  [2020-07-26 Sun 18:18]
:END:

Bartosz Milewski’s Basics of Haskell – Code and exercises - https://github.com/raviksharma/bartosz-basics-of-haskell

* Colorize Your CLI
:PROPERTIES:
:CREATED:  [2020-07-26 Sun 19:35]
:END:

Colorize Your CLI - https://danyspin97.org/blog/colorize-your-cli/

* WebGL Fluid Simulation
:PROPERTIES:
:CREATED:  [2020-07-26 Sun 19:36]
:END:

WebGL Fluid Simulation - https://paveldogreat.github.io/WebGL-Fluid-Simulation/?play

* The Regular Expression Visualizer, Simulator and Cross-Compiler Tool
:PROPERTIES:
:CREATED:  [2020-07-28 Tue 16:03]
:END:

The Regular Expression Visualizer, Simulator and Cross-Compiler Tool - https://blog.robertelder.org/regular-expression-visualizer/

* JSON Schema Store
:PROPERTIES:
:CREATED:  [2020-07-30 Thu 07:03]
:END:

https://www.schemastore.org/json/

* Revolv
:PROPERTIES:
:CREATED:  [2020-07-30 Thu 18:30]
:END:

https://getrevolv.com/

* Monitoring demystified: A guide for logging, tracing, metrics
:PROPERTIES:
:CREATED:  [2020-08-01 Sat 07:19]
:END:

Monitoring demystified: A guide for logging, tracing, metrics - https://techbeacon.com/enterprise-it/monitoring-demystified-guide-logging-tracing-metrics

* Home | Laws of UX
:PROPERTIES:
:CREATED:  [2020-08-02 Sun 22:24]
:END:

https://lawsofux.com/

* OCaml for the Skeptical: OCaml in a Nutshell (2006)
:PROPERTIES:
:CREATED:  [2020-08-02 Sun 22:26]
:END:

OCaml for the Skeptical: OCaml in a Nutshell (2006) - https://www2.lib.uchicago.edu/keith/ocaml-class/class-01.html

* A philosophical difference between Haskell and Lisp
:PROPERTIES:
:CREATED:  [2020-08-03 Mon 15:17]
:END:

https://chrisdone.com/posts/haskell-lisp-philosophy-difference/

* PP-YOLO Surpasses YOLOv4 – State-of-the-art object detection techniques
:PROPERTIES:
:CREATED:  [2020-08-04 Tue 06:21]
:END:

PP-YOLO Surpasses YOLOv4 – State-of-the-art object detection techniques - https://blog.roboflow.ai/pp-yolo-beats-yolov4-object-detection/

* System UIcons – icons designed for products, no attribution
:PROPERTIES:
:CREATED:  [2020-08-04 Tue 06:22]
:END:

System UIcons – icons designed for products, no attribution - https://systemuicons.com/

* OpenSSF: Open Source Security Foundation
:PROPERTIES:
:CREATED:  [2020-08-04 Tue 06:22]
:END:

OpenSSF: Open Source Security Foundation - https://github.com/ossf

* Unicode In Five Minutes ⌚
:PROPERTIES:
:CREATED:  [2020-08-14 Fri 18:33]
:END:

https://richardjharris.github.io/unicode-in-five-minutes.html

* DevOps, DataOps, and MLOps: the three waves of operationalization
:PROPERTIES:
:CREATED:  [2020-08-26 Wed 06:42]
:END:

DevOps, DataOps, and MLOps: the three waves of operationalization - https://blog.verta.ai/blog/the-third-wave-of-operationalization-is-here-mlops

* Architecture Playbook
:PROPERTIES:
:CREATED:  [2020-08-28 Fri 06:35]
:END:

Architecture Playbook - https://nocomplexity.com/documents/arplaybook/introduction.html

* Inventing Monads
:PROPERTIES:
:CREATED:  [2020-08-30 Sun 07:15]
:END:

Inventing Monads - https://stopa.io/post/247

* MIT 18.S191 Introduction to Computational Thinking
:PROPERTIES:
:CREATED:  [2020-09-07 Mon 05:17]
:END:

MIT 18.S191 Introduction to Computational Thinking - https://mitmath.github.io/18S191/Fall20/

* Please stop calling databases CP or AP (2015)
:PROPERTIES:
:CREATED:  [2020-09-07 Mon 06:28]
:END:

Please stop calling databases CP or AP (2015) - https://martin.kleppmann.com/2015/05/11/please-stop-calling-databases-cp-or-ap.html

* The technical interview is an ego trip
:PROPERTIES:
:CREATED:  [2020-09-13 Sun 06:29]
:END:

The technical interview is an ego trip - https://blog.kowsheek.com/the-technical-interview-is-an-ego-trip/

* React and D3.js
:PROPERTIES:
:CREATED:  [2021-03-30 Tue 06:27]
:END:

React and D3.js - https://wattenberger.com/blog/react-and-d3

* Category Theory: Orders
:PROPERTIES:
:CREATED:  [2021-04-01 Thu 19:58]
:END:

Category Theory: Orders - https://boris-marinov.github.io/category-theory-illustrated/04_order/

* https://advancedweb.hu/
:PROPERTIES:
:CREATED:  [2021-04-02 Fri 09:29]
:END:

* TLA+ Graph Explorer
:PROPERTIES:
:CREATED:  [2021-04-08 Thu 07:05]
:END:

TLA+ Graph Explorer - https://github.com/afonsonf/tlaplus-graph-explorer

* The Grand Unified Theory of Documentation
:PROPERTIES:
:CREATED:  [2021-04-16 Fri 09:40]
:END:

The Grand Unified Theory of Documentation - https://diataxis.fr/

* Category theory is a universal modeling language
:PROPERTIES:
:CREATED:  [2021-04-30 Fri 07:03]
:END:

Category theory is a universal modeling language - http://math.mit.edu/~dspivak/informatics/

* The Psychology of Design
:PROPERTIES:
:CREATED:  [2021-05-01 Sat 17:44]
:END:

The Psychology of Design - https://growth.design/psychology/

* https://blog.packagecloud.io/eng/2016/02/29/how-does-strace-work/
:PROPERTIES:
:CREATED:  [2021-05-06 Thu 07:45]
:END:

* https://man7.org/tlpi/api_changes/index.html
:PROPERTIES:
:CREATED:  [2021-05-06 Thu 07:50]
:END:

* https://typographyforlawyers.com/goofy-fonts.html
:PROPERTIES:
:CREATED:  [2021-05-14 Fri 21:35]
:END:

* The stack monoid revisited
:PROPERTIES:
:CREATED:  [2021-05-17 Mon 07:07]
:END:

The stack monoid revisited - https://raphlinus.github.io/gpu/2021/05/13/stack-monoid-revisited.html

* https://counterexamples.org/title.html
:PROPERTIES:
:CREATED:  [2021-05-25 Tue 06:31]
:END:

* Anatomy of a Linux DNS Lookup
:PROPERTIES:
:CREATED:  [2021-06-05 Sat 14:41]
:END:

Anatomy of a Linux DNS Lookup - https://zwischenzugs.com/2018/06/08/anatomy-of-a-linux-dns-lookup-part-i/

* https://web.dev/new-responsive/
:PROPERTIES:
:CREATED:  [2021-06-07 Mon 07:12]
:END:

* Surprising Shared Word Etymologies
:PROPERTIES:
:CREATED:  [2021-06-12 Sat 17:55]
:END:

Surprising Shared Word Etymologies - https://www.danielde.dev/blog/surprising-shared-word-etymologies/

* The Fixed Point: Laziness, Recursion and Fixed Points in Haskell
:PROPERTIES:
:CREATED:  [2021-06-13 Sun 02:03]
:END:

The Fixed Point: Laziness, Recursion and Fixed Points in Haskell - https://rebeccaskinner.net/posts/2021-06-09-getting-to-the-fixed-point.html

* Execute Docker Containers as QEMU MicroVMs
:PROPERTIES:
:CREATED:  [2021-06-17 Thu 00:03]
:END:

Execute Docker Containers as QEMU MicroVMs - https://mergeboard.com/blog/2-qemu-microvm-docker/

* My EC2 Wishlist
:PROPERTIES:
:CREATED:  [2021-06-17 Thu 00:03]
:END:

My EC2 Wishlist - http://www.daemonology.net/blog/2021-06-16-My-EC2-wishlist.html

* Execute Docker Containers as QEMU MicroVMs
:PROPERTIES:
:CREATED:  [2021-06-17 Thu 06:46]
:END:

Execute Docker Containers as QEMU MicroVMs - https://mergeboard.com/blog/2-qemu-microvm-docker/

* Hasura GraphQL Engine and SQL Server
:PROPERTIES:
:CREATED:  [2021-06-18 Fri 17:04]
:END:

Hasura GraphQL Engine and SQL Server - https://github.com/hasura/graphql-engine/blob/master/architecture/sql-server.md

* Taleb: Bitcoin, Currencies, and Bubbles
:PROPERTIES:
:CREATED:  [2021-06-21 Mon 06:37]
:END:

Taleb: Bitcoin, Currencies, and Bubbles - https://www.academia.edu/49313911/Bitcoin_Currencies_and_Bubbles

* http://www.jerf.org/iri/categories/Programming/
:PROPERTIES:
:CREATED:  [2021-06-26 Sat 12:33]
:END:

* Functors and Monads for People Who Have Read Too Many “Tutorials”
:PROPERTIES:
:CREATED:  [2021-06-27 Sun 00:02]
:END:

Functors and Monads for People Who Have Read Too Many “Tutorials” - http://www.jerf.org/iri/post/2958

* https://typeclasses.com/sitemap
:PROPERTIES:
:CREATED:  [2021-07-04 Sun 08:52]
:END:

* Paxos vs. Raft: Have we reached consensus on distributed consensus?
:PROPERTIES:
:CREATED:  [2021-07-16 Fri 23:48]
:END:

Paxos vs. Raft: Have we reached consensus on distributed consensus? - http://charap.co/reading-group-paxos-vs-raft-have-we-reached-consensus-on-distributed-consensus/

* https://simonwillison.net/2021/Jul/13/unix-domain-sockets/
:PROPERTIES:
:CREATED:  [2021-07-25 Sun 09:53]
:END:

* Challenges With Implementing DDD - DZone Web Dev
:PROPERTIES:
:CREATED:  [2021-08-12 Thu 07:48]
:END:

https://dzone.com/articles/challenges-implementing-ddd

* Email Authenticity 101: DKIM, Dmarc, and SPF
:PROPERTIES:
:CREATED:  [2021-08-16 Mon 07:14]
:END:

Email Authenticity 101: DKIM, Dmarc, and SPF - https://www.alexblackie.com/articles/email-authenticity-dkim-spf-dmarc/

* Programming Idioms
:PROPERTIES:
:CREATED:  [2021-08-16 Mon 07:14]
:END:

Programming Idioms - https://programming-idioms.org/

* You can list a directory containing 8M files, but not with ls
:PROPERTIES:
:CREATED:  [2021-08-16 Mon 07:15]
:END:

You can list a directory containing 8M files, but not with ls - http://be-n.com/spw/you-can-list-a-million-files-in-a-directory-but-not-with-ls.html

* Closing 45% of the open Emacs bugs
:PROPERTIES:
:CREATED:  [2021-08-16 Mon 07:18]
:END:

Closing 45% of the open Emacs bugs - https://lars.ingebrigtsen.no/2021/08/14/10x10/

* https://jesseduffield.com/Type-Keys/
:PROPERTIES:
:CREATED:  [2021-08-28 Sat 20:30]
:END:

* https://dev.to/yugabyte/uuid-or-cached-sequences-42fi
:PROPERTIES:
:CREATED:  [2021-08-30 Mon 15:55]
:END:

* A guide to fun mathematics YouTube channels
:PROPERTIES:
:CREATED:  [2021-09-01 Wed 06:52]
:END:

A guide to fun mathematics YouTube channels - https://samenright.com/2021/08/31/a-laymans-guide-to-recreational-mathematics-videos/

* The Complete GraphQL Security Guide
:PROPERTIES:
:CREATED:  [2021-09-03 Fri 06:26]
:END:

The Complete GraphQL Security Guide - https://wundergraph.com/blog/the_complete_graphql_security_guide_fixing_the_13_most_common_graphql_vulnerabilities_to_make_your_api_production_ready

* Picturing Git: Conceptions and Misconceptions
:PROPERTIES:
:CREATED:  [2021-09-03 Fri 06:26]
:END:

Picturing Git: Conceptions and Misconceptions - https://www.biteinteractive.com/picturing-git-conceptions-and-misconceptions/

* Podman: A tool for managing OCI containers and pods
:PROPERTIES:
:CREATED:  [2021-09-03 Fri 06:27]
:END:

Podman: A tool for managing OCI containers and pods - https://github.com/containers/podman

* Run GUI applications and desktops in Docker
:PROPERTIES:
:CREATED:  [2021-09-05 Sun 07:45]
:END:

Run GUI applications and desktops in Docker - https://github.com/mviereck/x11docker

* Podman, the open source Docker alternative ported to M1 (Apple Silicon) machines
:PROPERTIES:
:CREATED:  [2021-09-06 Mon 05:40]
:END:

Podman, the open source Docker alternative ported to M1 (Apple Silicon) machines - https://github.com/simnalamburt/homebrew-x/blob/main/Formula/podman-apple-silicon.rb

* An Introduction to Type Level Programming in Haskell
:PROPERTIES:
:CREATED:  [2021-09-10 Fri 06:29]
:END:

An Introduction to Type Level Programming in Haskell - https://rebeccaskinner.net/posts/2021-08-25-introduction-to-type-level-programming.html

* Stop just using “Frontend” or “Backend” to describe the Engineering you like
:PROPERTIES:
:CREATED:  [2021-09-10 Fri 06:30]
:END:

Stop just using “Frontend” or “Backend” to describe the Engineering you like - https://www.michellelim.org/writing/stop-using-frontend-backend/

* Monads are monoids in the category of endofunctors
:PROPERTIES:
:CREATED:  [2021-09-10 Fri 06:32]
:END:

Monads are monoids in the category of endofunctors - https://sambernheim.com/#/blog/monads-are-monoids-in-the-category-of-endofunctors

* Postgres: Boundless `Text` and Back Again
:PROPERTIES:
:CREATED:  [2021-09-11 Sat 08:16]
:END:

Postgres: Boundless `Text` and Back Again - https://brandur.org/text

* Mistakes I've Made in AWS
:PROPERTIES:
:CREATED:  [2021-09-12 Sun 10:00]
:END:

Mistakes I've Made in AWS - https://laravel-news.com/aws-mistakes

* How PCI-Express works (2020)
:PROPERTIES:
:CREATED:  [2021-09-12 Sun 10:02]
:END:

How PCI-Express works (2020) - https://www.ovh.com/blog/how-pci-express-works-and-why-you-should-care-gpu/

* Simple, opinionated and automated contract testing for your JSON API's
:PROPERTIES:
:CREATED:  [2021-09-12 Sun 10:04]
:END:

Simple, opinionated and automated contract testing for your JSON API's - https://github.com/hellgrenj/Rumpel

* Beam/Erlang/Elixir Concept Explanations
:PROPERTIES:
:CREATED:  [2021-09-13 Mon 06:59]
:END:

Beam/Erlang/Elixir Concept Explanations - http://beam-wisdoms.clau.se/en/latest/index.html

* Researchers Reconstruct Major Branches in the Tree of Language
:PROPERTIES:
:CREATED:  [2021-09-13 Mon 07:00]
:END:

Researchers Reconstruct Major Branches in the Tree of Language - https://www.santafe.edu/news-center/news/researchers-reconstruct-major-branches-tree-language

* New alternatives to HSL and HSV that better match color perception
:PROPERTIES:
:CREATED:  [2021-09-13 Mon 07:01]
:END:

New alternatives to HSL and HSV that better match color perception - https://bottosson.github.io/posts/colorpicker/

* Ghost in the Shell – Learn Shell Scripting
:PROPERTIES:
:CREATED:  [2021-09-13 Mon 07:31]
:END:

Ghost in the Shell – Learn Shell Scripting - https://vermaden.wordpress.com/2021/09/13/ghost-in-the-shell-part-6-learn-shell-scripting/

* Show HN: Produpedia.org – Lists of Everything
:PROPERTIES:
:CREATED:  [2021-09-13 Mon 07:34]
:END:

Show HN: Produpedia.org – Lists of Everything - https://produpedia.org/

* What Java Modules Are About
:PROPERTIES:
:CREATED:  [2021-09-13 Mon 07:37]
:END:

What Java Modules Are About - https://inside.java/2021/09/10/what-are-modules-about/

* The Magic Behind the Scenes of Docker Desktop
:PROPERTIES:
:CREATED:  [2021-09-13 Mon 07:37]
:END:

The Magic Behind the Scenes of Docker Desktop - https://www.docker.com/blog/the-magic-behind-the-scenes-of-docker-desktop/

* OWASP Top 10 2021
:PROPERTIES:
:CREATED:  [2021-09-13 Mon 07:45]
:END:

OWASP Top 10 2021 - https://owasp.org/Top10/

* How to Replace Docker with Podman on a Mac
:PROPERTIES:
:CREATED:  [2021-09-13 Mon 07:46]
:END:

How to Replace Docker with Podman on a Mac - https://www.redhat.com/sysadmin/replace-docker-podman-macos

* How Docker broke in half
:PROPERTIES:
:CREATED:  [2021-09-13 Mon 07:46]
:END:

How Docker broke in half - https://www.infoworld.com/article/3632142/how-docker-broke-in-half.html

* How percentile approximation works and why it's more useful than averages
:PROPERTIES:
:CREATED:  [2021-09-15 Wed 06:34]
:END:

How percentile approximation works and why it's more useful than averages - https://blog.timescale.com/blog/how-percentile-approximation-works-and-why-its-more-useful-than-averages/

* Loop Perforation (2019)
:PROPERTIES:
:CREATED:  [2021-09-15 Wed 06:41]
:END:

Loop Perforation (2019) - https://www.cs.cornell.edu/courses/cs6120/2019fa/blog/loop-perforation/

* Java 17 / JDK 17: General Availability
:PROPERTIES:
:CREATED:  [2021-09-15 Wed 06:42]
:END:

Java 17 / JDK 17: General Availability - https://mail.openjdk.java.net/pipermail/jdk-dev/2021-September/006037.html

* Boeing's Fatal Flaw (full documentary) – FRONTLINE
:PROPERTIES:
:CREATED:  [2021-09-15 Wed 06:44]
:END:

Boeing's Fatal Flaw (full documentary) – FRONTLINE - https://www.youtube.com/watch?v=wXMO0bhPhCw

* Don't build a general-purpose API to power your own front end
:PROPERTIES:
:CREATED:  [2021-09-15 Wed 06:44]
:END:

Don't build a general-purpose API to power your own front end - https://max.engineer/server-informed-ui

* CloudFormation: The Big Picture
:PROPERTIES:
:CREATED:  [2021-09-15 Wed 07:05]
:END:

CloudFormation: The Big Picture - https://gist.github.com/mitchellh/b52314d30ba22bb76f3d6bb9ff098090

* The Unicode Standard, Version 14.0
:PROPERTIES:
:CREATED:  [2021-09-15 Wed 07:13]
:END:

The Unicode Standard, Version 14.0 - http://blog.unicode.org/2021/09/announcing-unicode-standard-version-140.html

* How much faster is Java 17?
:PROPERTIES:
:CREATED:  [2021-09-16 Thu 06:44]
:END:

How much faster is Java 17? - https://www.optaplanner.org/blog/2021/09/15/HowMuchFasterIsJava17.html

* Succinct Dynamic Data Structures (2001) [pdf]
:PROPERTIES:
:CREATED:  [2021-09-16 Thu 06:47]
:END:

Succinct Dynamic Data Structures (2001) [pdf] - https://www.imsc.res.in/~vraman/pub/wads_01.pdf

* iOS on QEMU
:PROPERTIES:
:CREATED:  [2021-09-17 Fri 05:55]
:END:

iOS on QEMU - https://github.com/alephsecurity/xnu-qemu-arm64

* Show HN: Qsh – Improved database querying from your terminal
:PROPERTIES:
:CREATED:  [2021-09-17 Fri 06:00]
:END:

Show HN: Qsh – Improved database querying from your terminal - https://github.com/muhmud/qsh

* Infinity Category Theory Offers a Bird’s-Eye View of Mathematics
:PROPERTIES:
:CREATED:  [2021-09-17 Fri 06:04]
:END:

Infinity Category Theory Offers a Bird’s-Eye View of Mathematics - https://www.scientificamerican.com/article/infinity-category-theory-offers-a-birds-eye-view-of-mathematics/

* The Tragedy of the Common Lisp: Why Large Languages Explode
:PROPERTIES:
:CREATED:  [2021-09-17 Fri 06:04]
:END:

The Tragedy of the Common Lisp: Why Large Languages Explode - https://erights.medium.com/the-tragedy-of-the-common-lisp-why-large-languages-explode-4e83096239b9

* Exploring 120 Years of Timezones
:PROPERTIES:
:CREATED:  [2021-09-17 Fri 06:04]
:END:

Exploring 120 Years of Timezones - https://blog.scottlogic.com/2021/09/14/120-years-timezone.html

* Kali Linux 2021.3 Release
:PROPERTIES:
:CREATED:  [2021-09-17 Fri 06:07]
:END:

Kali Linux 2021.3 Release - https://www.kali.org/blog/kali-linux-2021-3-release/

* Material-UI is releasing v5 and rebrands to mui.com
:PROPERTIES:
:CREATED:  [2021-09-17 Fri 06:08]
:END:

Material-UI is releasing v5 and rebrands to mui.com - https://mui.com/blog/mui-core-v5/

* What Is the Data Lakehouse Pattern?
:PROPERTIES:
:CREATED:  [2021-09-17 Fri 06:19]
:END:

What Is the Data Lakehouse Pattern? - https://timeflow.systems/what-is-the-data-lakehouse-pattern/

* What We’ve Learned After 6 Years of IO Scheduling
:PROPERTIES:
:CREATED:  [2021-09-17 Fri 06:22]
:END:

What We’ve Learned After 6 Years of IO Scheduling - https://www.p99conf.io/2021/09/15/what-weve-learned-after-6-years-of-io-scheduling/

* Oracle Free Java License
:PROPERTIES:
:CREATED:  [2021-09-17 Fri 06:23]
:END:

Oracle Free Java License - https://blogs.oracle.com/java/post/free-java-license

* Best PostgreSQL GUIs in 2021
:PROPERTIES:
:CREATED:  [2021-09-17 Fri 06:25]
:END:

Best PostgreSQL GUIs in 2021 - https://retool.com/blog/best-postgresql-guis-in-2020/

* Optimizing Images on the Web
:PROPERTIES:
:CREATED:  [2021-09-17 Fri 06:28]
:END:

Optimizing Images on the Web - https://blog.cloudflare.com/optimizing-images/

* Latency Implications of Virtual Memory
:PROPERTIES:
:CREATED:  [2021-09-17 Fri 06:29]
:END:

Latency Implications of Virtual Memory - https://rigtorp.se/virtual-memory/

* Trick I learned from Nassim Taleb to get better at chess and chess variants fast
:PROPERTIES:
:CREATED:  [2021-09-17 Fri 06:31]
:END:

Trick I learned from Nassim Taleb to get better at chess and chess variants fast - https://speedtestdemon.com/turing-technique-fast-learning-trick-fo-chess-like-games-mastered-by-computers-written-by-a-fully-recovered-chess-addict/

* Prolonged fasting 're-boots' immune system
:PROPERTIES:
:CREATED:  [2021-09-17 Fri 06:33]
:END:

Prolonged fasting 're-boots' immune system - https://www.medicalnewstoday.com/articles/277860

* Linkerd amongst the ranks of Kubernetes and Prometheus
:PROPERTIES:
:CREATED:  [2021-09-17 Fri 06:37]
:END:

Linkerd amongst the ranks of Kubernetes and Prometheus - https://containerjournal.com/features/linkerds-cncf-graduation-due-to-its-simplicity/

* The Unicode Standard, Version 14.0
:PROPERTIES:
:CREATED:  [2021-09-17 Fri 06:39]
:END:

The Unicode Standard, Version 14.0 - http://blog.unicode.org/2021/09/announcing-unicode-standard-version-140.html

* Steven Pinker thinks your sense of imminent doom is wrong
:PROPERTIES:
:CREATED:  [2021-09-17 Fri 06:40]
:END:

Steven Pinker thinks your sense of imminent doom is wrong - https://www.nytimes.com/interactive/2021/09/06/magazine/steven-pinker-interview.html

* https://neverworkintheory.org/2021/09/16/exception-handling-practices-and-post-release-defects.html
:PROPERTIES:
:CREATED:  [2021-09-18 Sat 07:58]
:END:

